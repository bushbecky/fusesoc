#!/usr/bin/python
import argparse
import os
import sys

#Check if this is run from a local installation
orpsocdir = os.path.abspath(os.path.join(os.path.dirname(os.path.realpath(__file__)), ".."))
if os.path.exists(os.path.join(orpsocdir, "orpsoc")):
    sys.path[0:0] = [orpsocdir]
else:
    sys.path[0:0] = ['@pythondir@']

from orpsoc.build import BackendFactory
from orpsoc.config import Config
from orpsoc.coremanager import CoreManager
from orpsoc.simulator import SimulatorFactory
from orpsoc.system import System
from orpsoc.core import Core
import logging

logging.basicConfig(filename='orpsoc.log', filemode='w', level=logging.DEBUG)
logger = logging.getLogger(__name__)

def build(known, remaining):
    logger.debug('build() *Entered*')
    if known.system in CoreManager().get_systems():
        core = CoreManager().get_core(known.system)

    backend = BackendFactory(core.system)
    backend.configure()
    backend.build()
    logging.debug('build() -Done-')

def pgm(known, remaining):
    logger.debug('pgm() *Entered*')
    if known.system in CoreManager().get_systems():
        core = CoreManager().get_core(known.system)

    backend = BackendFactory(core.system)
    backend.pgm(remaining)
    logging.debug('pgm() -Done-')

def list_cores(known, remaining):
    cores = CoreManager().get_cores()
    print("Available cores:")
    maxlen = max(map(len,cores.keys()))
    print('Core'.ljust(maxlen) + '   Cache status')
    print("="*80)
    for name, core in cores.items():
        print(name.ljust(maxlen) + ' : ' + core.cache_status())
    logger.debug('list_cores() -Done-')

def core_info(known, remaining):
    logger.debug('core_info() *Entered*')
    core = CoreManager().get_core(known.core)
    if core:
        core.info()
    else:
        print("Error: Can't find core " + known.core)

def list_systems(known, remaining):
    logger.debug('list_systems() *Entered*')
    print("Available systems:")
    for system in CoreManager().get_systems():
        print(system)

def system_info(known, remaining):
    logger.debug('info() *Entered*')
    if known.system in CoreManager().get_systems():
        core = CoreManager().get_core(known.system)
        core.info()
        core.system.info()
    else:
        print("Can't find system " + known.system)

def sim(known, remaining):
    logger.debug('sim() *Entered*')
    core = CoreManager().get_core(known.system)
    if core == None:
        print("Could not find any core named " + known.system)
        exit(1)
    if known.sim:
        sim_name = known.sim[0]
    elif core.simulators:
        sim_name = core.simulators[0]
    else:
        print("No simulator was found in "+ known.system + " core description")
        logger.error("No simulator was found in "+ known.system + " core description")
        exit(1)
    sim = SimulatorFactory(sim_name, core)
    if known.force or not os.path.exists(sim.sim_root):
        sim.configure()
        sim.build()
    if not known.build_only:
        sim.run(remaining)
    logger.debug('sim() -Done-')

def run(known, remaining):
    cm = CoreManager()
    cm.add_cores_root(known.cores_root)
    cm.add_cores_root(known.systems_root)
    known.func(known, remaining)

if __name__ == "__main__":
    logger.debug('__main__ *Entered*')
    logger.debug("Command line arguments: " + str(sys.argv))

    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers()

    parser.add_argument('--cores-root', help='Add additional directories containing cores', action='append')
    parser.add_argument('--systems-root', help='Add additional directories containing systems', action='append')
    #General options
    parser_build = subparsers.add_parser('build', help='Build an FPGA load module')
    parser_build.add_argument('system')
    parser_build.set_defaults(func=build)

    parser_pgm = subparsers.add_parser('pgm', help='Program a FPGA with a system configuration')
    parser_pgm.add_argument('system')
    parser_pgm.set_defaults(func=pgm)

    parser_list_systems = subparsers.add_parser('list-systems', help='List available systems')
    parser_list_systems.set_defaults(func=list_systems)

    parser_system_info = subparsers.add_parser('system-info', help='Displays details about a system')
    parser_system_info.add_argument('system')
    parser_system_info.set_defaults(func=system_info)

    parser_list_cores = subparsers.add_parser('list-cores', help='List available cores')
    #parser_list_cores.
    parser_list_cores.set_defaults(func=list_cores)

    parser_core_info = subparsers.add_parser('core-info', help='Displays details about a core')
    parser_core_info.add_argument('core')
    parser_core_info.set_defaults(func=core_info)

    #Simulation subparser
    parser_sim = subparsers.add_parser('sim', help='Setup and run a simulation')
    parser_sim.add_argument('--sim', nargs=1, help='Override the simulator settings from the system file')
    parser_sim.add_argument('--build-only', action='store_true', help='Build the simulation binary without running the simulator')
    parser_sim.add_argument('--force', action='store_true', help='Force rebuilding simulation model when directory exists')
    parser_sim.add_argument('--dry-run', action='store_true')
    parser_sim.add_argument('system',help='Select a system to simulate') #, choices = Config().get_systems())
    parser_sim.set_defaults(func=sim)

    known, remaining = parser.parse_known_args()

    run(known, remaining)
    logger.debug('__main__ -Done-')
